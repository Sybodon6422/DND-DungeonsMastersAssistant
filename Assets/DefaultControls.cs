//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/DefaultControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultControls"",
    ""maps"": [
        {
            ""name"": ""BaseMap"",
            ""id"": ""f479fa1c-cad2-4200-9a6a-b7cd7016a5f7"",
            ""actions"": [
                {
                    ""name"": ""mousePos"",
                    ""type"": ""Value"",
                    ""id"": ""508a4eca-3d84-4e9a-b55e-58ef31013f74"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""b7fb8e91-12fb-431e-97af-9f5c171c8c20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""bde5d878-a5d0-4559-8a81-f0fff2c51d6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""wasd"",
                    ""type"": ""Value"",
                    ""id"": ""14450328-0730-4fb7-a4a2-7a57ba46ff8a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""scroll"",
                    ""type"": ""Value"",
                    ""id"": ""839f8276-e3db-45b6-a0fc-c20e05b6cedf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af6a0831-5f5f-4ba4-8ad7-c0701d6a8a07"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f56d63d-5490-4f4e-8fec-8d68188b58ad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e502071b-a5d5-4508-b0e5-932f2fa7eace"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5e61f176-ef9c-4513-9405-45d0463ed287"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1a072538-3930-445f-9560-349db05e0cf0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1942401a-4ab9-4ea3-a50d-4874afb978b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b855a929-cb8e-4a1f-9b69-13239601920b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f7881db0-d6e1-43b6-84d4-db7c853e6ac9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""70fb4225-6ed3-45b3-92af-e08333698d21"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseMap
        m_BaseMap = asset.FindActionMap("BaseMap", throwIfNotFound: true);
        m_BaseMap_mousePos = m_BaseMap.FindAction("mousePos", throwIfNotFound: true);
        m_BaseMap_LeftClick = m_BaseMap.FindAction("LeftClick", throwIfNotFound: true);
        m_BaseMap_RightClick = m_BaseMap.FindAction("RightClick", throwIfNotFound: true);
        m_BaseMap_wasd = m_BaseMap.FindAction("wasd", throwIfNotFound: true);
        m_BaseMap_scroll = m_BaseMap.FindAction("scroll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseMap
    private readonly InputActionMap m_BaseMap;
    private IBaseMapActions m_BaseMapActionsCallbackInterface;
    private readonly InputAction m_BaseMap_mousePos;
    private readonly InputAction m_BaseMap_LeftClick;
    private readonly InputAction m_BaseMap_RightClick;
    private readonly InputAction m_BaseMap_wasd;
    private readonly InputAction m_BaseMap_scroll;
    public struct BaseMapActions
    {
        private @DefaultControls m_Wrapper;
        public BaseMapActions(@DefaultControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @mousePos => m_Wrapper.m_BaseMap_mousePos;
        public InputAction @LeftClick => m_Wrapper.m_BaseMap_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_BaseMap_RightClick;
        public InputAction @wasd => m_Wrapper.m_BaseMap_wasd;
        public InputAction @scroll => m_Wrapper.m_BaseMap_scroll;
        public InputActionMap Get() { return m_Wrapper.m_BaseMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseMapActions set) { return set.Get(); }
        public void SetCallbacks(IBaseMapActions instance)
        {
            if (m_Wrapper.m_BaseMapActionsCallbackInterface != null)
            {
                @mousePos.started -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMousePos;
                @mousePos.performed -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMousePos;
                @mousePos.canceled -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMousePos;
                @LeftClick.started -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnRightClick;
                @wasd.started -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnWasd;
                @wasd.performed -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnWasd;
                @wasd.canceled -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnWasd;
                @scroll.started -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnScroll;
                @scroll.performed -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnScroll;
                @scroll.canceled -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnScroll;
            }
            m_Wrapper.m_BaseMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @mousePos.started += instance.OnMousePos;
                @mousePos.performed += instance.OnMousePos;
                @mousePos.canceled += instance.OnMousePos;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @wasd.started += instance.OnWasd;
                @wasd.performed += instance.OnWasd;
                @wasd.canceled += instance.OnWasd;
                @scroll.started += instance.OnScroll;
                @scroll.performed += instance.OnScroll;
                @scroll.canceled += instance.OnScroll;
            }
        }
    }
    public BaseMapActions @BaseMap => new BaseMapActions(this);
    public interface IBaseMapActions
    {
        void OnMousePos(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnWasd(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
}
